generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int           @id @default(autoincrement())
  username                  String        @unique(map: "username") 
  email                     String        @unique(map: "email")
  password                  String        
  role                      String        
  emailResetPassword        String?       @db.Text
  passwordResetTokenExpires DateTime?
  contactId                 Int           @unique
  queries                   SearchQuery[]
  contact                   Contact       @relation(fields: [contactId], references: [id])
}

model Contact {
  id                   Int             @id @default(autoincrement())
  name                 String          
  email                String          @unique(map: "email")
  organizationId       Int?
  projectParticipation Boolean
  network              Boolean         @default(false)
  sectorId             Int?
  termsId              Int?
  country              String?
  sector               Sector?         @relation(fields: [sectorId], references: [id])
  acceptedTerms        Terms?          @relation(fields: [termsId], references: [id])
  organization         Organization?    @relation(fields: [organizationId], references: [id])
  activityParticipation ActivityParticipation[]
  user                 User?
  tags                 TagsOnContacts[]
  changes              ContactChange[]
}

model ActivityType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  activities  Activity[]
}

model Activity {
  id              Int       @id @default(autoincrement())
  title           String    
  description     String?   @db.Text
  activityTypeId  Int
  date            DateTime
  duration        Int?      // Duration in minutes
  location        String?   // Physical location or URL
  website         String?   @db.VarChar(255)
  organizationId  Int?
  organization    Organization? @relation(fields: [organizationId], references: [id])
  participants    ActivityParticipation[]
  activityType    ActivityType @relation(fields: [activityTypeId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([activityTypeId])
  @@index([organizationId])
}

model ActivityParticipation {
  id          Int       @id @default(autoincrement())
  activityId  Int
  contactId   Int
  activity    Activity  @relation(fields: [activityId], references: [id])
  contact     Contact   @relation(fields: [contactId], references: [id])
  role        String?   // participant, presenter, moderator
  attendance  Boolean?  
  createdAt   DateTime  @default(now())

  @@unique([activityId, contactId])
  @@index([contactId])
}

model Organization {
  id           Int       @id @default(autoincrement())
  acronym      String?   @unique(map: "acronym")
  fullName     String    
  regionalName String?   
  website      String?   
  country      String?   
  contact      Contact[]
  activities   Activity[]
  tags         TagsOnOrganizations[]
  changes      OrganizationChange[]
}

model Tag {
  id            Int                   @id @default(autoincrement())
  name          String               @unique
  color         String?              
  contacts      TagsOnContacts[]
  organizations TagsOnOrganizations[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model TagsOnContacts {
  contactId Int
  tagId     Int
  contact   Contact @relation(fields: [contactId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())

  @@id([contactId, tagId])
}

model TagsOnOrganizations {
  organizationId Int
  tagId         Int
  organization  Organization @relation(fields: [organizationId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])
  createdAt     DateTime    @default(now())

  @@id([organizationId, tagId])
}

model ContactChange {
  id        Int      @id @default(autoincrement())
  contactId Int
  contact   Contact  @relation(fields: [contactId], references: [id])
  field     String   
  oldValue  String?  
  newValue  String?  
  changedBy Int      
  createdAt DateTime @default(now())

  @@index([contactId])
}

model OrganizationChange {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  field          String      
  oldValue       String?     
  newValue       String?     
  changedBy      Int         
  createdAt      DateTime    @default(now())

  @@index([organizationId])
}

model Sector {
  id      Int       @id @default(autoincrement())
  name    String    
  Contact Contact[]
}

model SearchQuery {
  id        Int      @id @default(autoincrement())
  query     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  filters   Json?    
  createdAt DateTime @default(now())
}

model Terms {
  id          Int       @id @default(autoincrement())
  description String    @db.Text
  Contact     Contact[]
}