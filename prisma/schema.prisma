generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int           @id @default(autoincrement())
  username                  String        @unique(map: "username") @db.VarChar(255)
  email                     String        @unique(map: "email") @db.VarChar(255)
  password                  String        @db.VarChar(255)
  role                      String        @db.VarChar(255)
  emailResetPassword        String?       @db.Text
  passwordResetTokenExpires DateTime?
  contactId                 Int           @unique
  queries                   SearchQuery[]
  contact                   Contact       @relation(fields: [contactId], references: [id])
}

model Contact {
  id                   Int             @id @default(autoincrement())
  name                 String          @db.VarChar(255)
  email                String          @unique(map: "email") @db.VarChar(255)
  organizationId       Int?
  projectParticipation Boolean
  sectorId             Int?
  termsId              Int?
  userId               Int?
  country              String?
  sector               Sector?         @relation(fields: [sectorId], references: [id])
  acceptedTerms        Terms?          @relation(fields: [termsId], references: [id])
  organization         Organization?   @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contact_ibfk_1")
  participation        Participation[]
  user                 User?

  @@index([organizationId], map: "organizationId")
  @@index([sectorId], map: "Contact_sectorId_fkey")
  @@index([termsId], map: "Contact_termsId_fkey")
}

model Organization {
  id           Int       @id @default(autoincrement())
  acronym      String?   @unique(map: "acronym") @db.VarChar(255)
  fullName     String    @db.VarChar(255)
  regionalName String?   @db.VarChar(255)
  website      String?   @db.VarChar(255)
  country      String?   @db.VarChar(255)
  contact      Contact[]
  event        Event[]
}

model Sector {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  Contact Contact[]
}

model SearchQuery {
  id     Int    @id @default(autoincrement())
  query  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "SearchQuery_userId_fkey")
}

model Event {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(255)
  scheduledDate   DateTime        @db.DateTime(0)
  duration        Int
  usersRegistered Int
  usersApproved   Int
  usersDenied     Int
  usersCancelled  Int
  website         String          @db.VarChar(255)
  organizationId  Int?
  internalEventId String          @db.VarChar(255)
  organization    Organization?   @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_ibfk_1")
  participation   Participation[]

  @@index([organizationId], map: "organizationId")
}

model Participation {
  id                Int                           @id @default(autoincrement())
  contactId         Int
  eventId           Int
  registrationTime  DateTime?                     @db.DateTime(0)
  timeParticipation Int?
  approvalStatus    participation_approvalStatus? @default(pending)
  isPanelist        Boolean?
  contact           Contact                       @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_ibfk_1")
  event             Event                         @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_ibfk_2")

  @@index([contactId], map: "contactId")
  @@index([eventId], map: "eventId")
}

model Terms {
  id          Int       @id @default(autoincrement())
  description String    @db.Text
  Contact     Contact[]
}

enum participation_approvalStatus {
  pending
  approved
  denied
  cancelled
}
